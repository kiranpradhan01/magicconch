{"version":3,"sources":["magicconch.jpg","App.js","reportWebVitals.js","index.js"],"names":["responses","locations","left","top","App","useState","question","setQuestion","response","setResponse","responseLocation","setResponseLocation","className","id","style","fontSize","fontStyle","textShadow","position","textAlign","WebkitTextStrokeColor","WebkitTextStrokeWidth","responseStyle","src","conch","height","alt","marginBottom","marginRight","value","onChange","input","onClick","e","preventDefault","randomResponse","Math","floor","random","length","randomLocation","disabled","target","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAAe,MAA0B,uC,eCInCA,EAAY,CAChB,KACA,MACA,QACA,mBACA,UACA,aACA,aAGIC,EAAY,CAChB,CAACC,KAAM,MAAOC,IAAK,SACnB,CAACD,KAAM,MAAOC,IAAK,SACnB,CAACD,KAAM,MAAOC,IAAK,SACnB,CAACD,KAAM,MAAOC,IAAK,SACnB,CAACD,KAAM,MAAOC,IAAK,SACnB,CAACD,KAAM,MAAOC,IAAK,UAsENC,MAnEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmCJ,mBAASJ,EAAU,IAHtD,mBAGNS,EAHM,KAGYC,EAHZ,KAgCb,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,gCACE,mBAAGC,GAAG,WAAWC,MAhBH,SAACJ,GAAD,MAAuB,CAC3CK,SAAU,OACVC,UAAW,SACXC,WAAY,oBACZC,SAAU,WACVhB,KAAMQ,EAAiBR,KACvBC,IAAKO,EAAiBP,IACtBgB,UAAW,SACXC,sBAAuB,QACvBC,sBAAuB,SAOOC,CAAcZ,GAAtC,SACGF,IAEH,qBAAKe,IAAKC,EAAOV,MAAO,CAAEW,OAAQ,SAAUC,IAAI,uBAGlD,mBAAGd,UAAU,eAAb,iCAGA,sBAAKE,MAAO,CAAEa,aAAc,QAA5B,UACE,uBACEd,GAAG,WACHC,MAAO,CAAEc,YAAa,QACtBC,MAAOvB,EACPwB,SAAU,SAACC,GACTxB,EAAYwB,EAAMF,OAClBpB,EAAY,OAIhB,wBAAQuB,QAnDhB,SAAqBC,GACnBA,EAAEC,iBAGF3B,EAAY,IAGZ,IAAI4B,EAAiBC,KAAKC,MAAMD,KAAKE,SAAWtC,EAAUuC,QACtDC,EAAiBJ,KAAKC,MAAMD,KAAKE,SAAWrC,EAAUsC,QAG1D9B,EAAYT,EAAUmC,IACtBxB,EAAoBV,EAAUuC,KAuCMC,SAA+B,KAAb,OAARnC,QAAQ,IAARA,OAAA,EAAAA,EAAUiC,QAAlD,uBAKJ,2DACuB,mBAAGG,OAAO,SAASC,KAAK,+CAAxB,2BCzEdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0bc948fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/magicconch.3e8f08ea.jpg\";","import conch from './magicconch.jpg';\r\nimport './App.css';\r\nimport React, { useState } from 'react';\r\n\r\nconst responses = [\r\n  \"no\",\r\n  \"yes\",\r\n  \"maybe\",\r\n  \"try asking again\",\r\n  \"perhaps\",\r\n  \"it depends\",\r\n  \"GAME OVER\",\r\n];\r\n\r\nconst locations = [\r\n  {left: '10%', top: '100px'}, \r\n  {left: '20%', top: '300px'}, \r\n  {left: '20%', top: '450px'}, \r\n  {left: '30%', top: '200px'}, \r\n  {left: '70%', top: '450px'}, \r\n  {left: '40%', top: '200px'}, \r\n];\r\n\r\nfunction App() {\r\n  const [question, setQuestion] = useState('');\r\n  const [response, setResponse] = useState('');\r\n  const [responseLocation, setResponseLocation] = useState(locations[0]);\r\n\r\n  function askTheConch(e) {\r\n    e.preventDefault();\r\n\r\n    // set text to empty\r\n    setQuestion(''); \r\n\r\n    // find a RANDOM value from the 'responses' array\r\n    let randomResponse = Math.floor(Math.random() * responses.length);\r\n    let randomLocation = Math.floor(Math.random() * locations.length);\r\n\r\n    // set the text value of 'response' to be the result of step 2\r\n    setResponse(responses[randomResponse]);\r\n    setResponseLocation(locations[randomLocation]);\r\n  }\r\n\r\n  const responseStyle = (responseLocation) => ({\r\n    fontSize: '90px', \r\n    fontStyle: 'italic',\r\n    textShadow: '2px 2px 5px black',\r\n    position: 'absolute',\r\n    left: responseLocation.left,\r\n    top: responseLocation.top,\r\n    textAlign: 'center',\r\n    WebkitTextStrokeColor: 'black', \r\n    WebkitTextStrokeWidth: '2.5px'\r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <main>\r\n        <div>\r\n          <p id=\"response\" style={responseStyle(responseLocation)} >\r\n            {response}\r\n          </p>\r\n          <img src={conch} style={{ height: '500px'}} alt=\"the magic conch\" />\r\n        </div>\r\n        \r\n        <p className=\"title-prompt\">\r\n          Ask the Magic Conch\r\n        </p>\r\n        <div style={{ marginBottom: '50px' }}>\r\n          <input \r\n            id=\"question\" \r\n            style={{ marginRight: '10px' }} \r\n            value={question} \r\n            onChange={(input) => {\r\n              setQuestion(input.value); \r\n              setResponse('');\r\n            }\r\n          }>\r\n          </input>\r\n          <button onClick={askTheConch} disabled={question?.length === 0}>\r\n            Ask\r\n          </button>\r\n        </div>\r\n      </main>\r\n      <footer>\r\n        By Kiran and Patrin. <a target=\"_blank\" href=\"https://github.com/kiranpradhan01/magicconch\">Github</a>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}